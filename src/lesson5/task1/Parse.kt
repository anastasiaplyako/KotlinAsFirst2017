@file:Suppress("UNUSED_PARAMETER")

package lesson5.task1

/**
 * Пример
 *
 * Время представлено строкой вида "11:34:45", содержащей часы, минуты и секунды, разделённые двоеточием.
 * Разобрать эту строку и рассчитать количество секунд, прошедшее с начала дня.
 */
fun timeStrToSeconds(str: String): Int {
    val parts = str.split(":")
    var result = 0
    for (part in parts) {
        val number = part.toInt()
        result = result * 60 + number
    }
    return result
}

/**
 * Пример
 *
 * Дано число n от 0 до 99.
 * Вернуть его же в виде двухсимвольной строки, от "00" до "99"
 */
fun twoDigitStr(n: Int) = if (n in 0..9) "0$n" else "$n"

/**
 * Пример
 *
 * Дано seconds -- время в секундах, прошедшее с начала дня.
 * Вернуть текущее время в виде строки в формате "ЧЧ:ММ:СС".
 */
fun timeSecondsToStr(seconds: Int): String {
    val hour = seconds / 3600
    val minute = (seconds % 3600) / 60
    val second = seconds % 60
    return String.format("%02d:%02d:%02d", hour, minute, second)
}

/**
 * Пример: консольный ввод
 */
fun main(args: Array<String>) {
    println("Введите время в формате ЧЧ:ММ:СС")
    val line = readLine()
    if (line != null) {
        val seconds = timeStrToSeconds(line)
        if (seconds == -1) {
            println("Введённая строка $line не соответствует формату ЧЧ:ММ:СС")
        } else {
            println("Прошло секунд с начала суток: $seconds")
        }
    } else {
        println("Достигнут <конец файла> в процессе чтения строки. Программа прервана")
    }
}

/**
 * Средняя
 *
 * Дата представлена строкой вида "15 июля 2016".
 * Перевести её в цифровой формат "15.07.2016".
 * День и месяц всегда представлять двумя цифрами, например: 03.04.2011.
 * При неверном формате входной строки вернуть пустую строку
 * выделить из строки переменные
 */
val month = listOf("января", "февраля", "марта", "апреля", "мая",
        "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря")

fun dateStrToDigit(str: String): String {
    val list = str.split(" ")
    if (str.matches(Regex("""\d+\s[a-z]\s\d+""")) && (list[2].toInt() > 0)) {
        return String.format("%02d.%02d.%s", list[0].toInt(), month.indexOf(list[1]) + 1, list[2])
    }
    return ""
}

/**
 * Средняя
 *
 * Дата представлена строкой вида "15.07.2016".
 * Перевести её в строковый формат вида "15 июля 2016".
 * При неверном формате входной строки вернуть пустую строку
 */
fun dateDigitToStr(digital: String): String {
    val month = listOf("января", "февраля", "марта", "апреля", "мая", "июня", "июля",
            "августа", "сентября", "октября", "ноября", "декабря")
    if ((!digital.matches(Regex("""\d\d.\d\d.\d+""")))) return ""
    val part = digital.split(".")
    return try {
        val date = part[0].toInt()
        var monthx = (month[part[1].toInt() - 1])
        val year = part[2].toInt()
        if ((part.size == 3))
            String.format("%d %s %d", date, monthx, year)
        else ""
    } catch (e: Exception) {
        ""
    }

}


/**
 * Средняя
 *
 * Номер телефона задан строкой вида "+7 (921) 123-45-67".
 * Префикс (+7) может отсутствовать, код города (в скобках) также может отсутствовать.
 * Может присутствовать неограниченное количество пробелов и чёрточек,
 * например, номер 12 --  34- 5 -- 67 -98 тоже следует считать легальным.
 * Перевести номер в формат без скобок, пробелов и чёрточек (но с +), например,
 * "+79211234567" или "123456789" для приведённых примеров.
 * Все символы в номере, кроме цифр, пробелов и +-(), считать недопустимыми.
 * При неверном формате вернуть пустую строку
 */
fun flattenPhoneNumber(phone: String): String = TODO()


/**
 * Средняя
 *
 * Результаты спортсмена на соревнованиях в прыжках в длину представлены строкой вида
 * "706 - % 717 % 703".
 * В строке могут присутствовать числа, черточки - и знаки процента %, разделённые пробелами;
 * число соответствует удачному прыжку, - пропущенной попытке, % заступу.
 * Прочитать строку и вернуть максимальное присутствующее в ней число (717 в примере).
 * При нарушении формата входной строки или при отсутствии в ней чисел, вернуть -1.
 */
fun bestLongJump(jumps: String): Int {
    val symbols = listOf("-", "%", "")
    var max = -1
    val list = jumps.split(" ").filter { it !in symbols }
    try {
        for (i in list) {
            val tmp = i.toInt()
            if (tmp >= max) {
                max = tmp
            }
        }
    } catch (e: NumberFormatException) {
        return -1
    }
    return max
}

/**
 * Сложная
 *
 * Результаты спортсмена на соревнованиях в прыжках в высоту представлены строкой вида
 * "220 + 224 %+ 228 %- 230 + 232 %%- 234 %".
 * Здесь + соответствует удачной попытке, % неудачной, - пропущенной.
 * Высота и соответствующие ей попытки разделяются пробелом.
 * Прочитать строку и вернуть максимальную взятую высоту (230 в примере).
 * При нарушении формата входной строки вернуть -1.
 */
fun bestHighJump(jumps: String): Int {
    var max = 0
    if (jumps.contains(Regex("""[^\d %+-]""")) || '+' !in jumps) return -1
    var jump = Regex("""\d+ [%-]+ """).replace(jumps + " ", "")
    jump = Regex(""" [^\d]+ *""").replace(jump + " ", " ")
    val list = jump.split(" ")
    for (element in list) {
        if (element != "" && element.toInt() >= max) {
            max = element.toInt()
        }
    }
    return max
}

/**
 * Сложная
 *
 * В строке представлено выражение вида "2 + 31 - 40 + 13",
 * использующее целые положительные числа, плюсы и минусы, разделённые пробелами.
 * Наличие двух знаков подряд "13 + + 10" или двух чисел подряд "1 2" не допускается.
 * Вернуть значение выражения (6 для примера).
 * Про нарушении формата входной строки бросить исключение IllegalArgumentException
 */
fun plusMinus(expression: String): Int {
    if (!expression.matches(Regex("""(\d+ [+-] )*(\d+)""")))
        throw IllegalArgumentException()
    val list = expression.split(" ")
    var res = list[0].toInt()
    try {
        for (i in 1 until list.size step 2) {
            when (list[i]) {
                "+" -> res += list[i + 1].toInt()
                "-" -> res -= list[i + 1].toInt()
                else -> throw IllegalArgumentException()
            }
        }
        return res
    } catch (e: NumberFormatException) {
        throw IllegalArgumentException()
    }
}

/**
 * Сложная
 *
 * Строка состоит из набора слов, отделённых друг от друга одним пробелом.
 * Определить, имеются ли в строке повторяющиеся слова, идущие друг за другом.
 * Слова, отличающиеся только регистром, считать совпадающими.
 * Вернуть индекс начала первого повторяющегося слова, или -1, если повторов нет.
 * Пример: "Он пошёл в в школу" => результат 9 (индекс первого 'в')
 */

fun firstDuplicateIndex(str: String): Int {
    val list = str.split(" ")
    var res = 0
    if (list.size == 1) return -1
    for (i in 1 until list.size - 1) {
        if (list[i].equals(list[i - 1], true)) {
            return res + i - 1
        }
        res += list[i - 1].length
    }
    return -1
}

/**
 * Сложная
 *
 * Строка содержит названия товаров и цены на них в формате вида
 * "Хлеб 39.9; Молоко 62.5; Курица 184.0; Конфеты 89.9".
 * То есть, название товара отделено от цены пробелом,
 * а цена отделена от названия следующего товара точкой с запятой и пробелом.
 * Вернуть название самого дорогого товара в списке (в примере это Курица),
 * или пустую строку при нарушении формата строки.
 * Все цены должны быть положительными
 */
fun mostExpensive(description: String): String {
    if (!description.matches(Regex("""(.* \d+(\.\d+)?; )*(.* \d+(\.\d+)?)""")))
        return ""
    var max = -1.0
    var i = 0
    var k = 0 // индексирует числа
    var kMax = 0  // находит индекс максимального числа
    for (element in Regex("""\d+.\d+""").findAll(description)) {
        k++
        if (element.value.toDouble() > max) {
            max = element.value.toDouble()
            kMax = k
        }
    }
    for (element in Regex("""[А-Яа-я]+""").findAll(description)) {
        i++
        if (i == kMax) {
            return (element.value)
        }
    }
    return ""
}

/**
 * Сложная
 *
 * Перевести число roman, заданное в римской системе счисления,
 * в десятичную систему и вернуть как результат.
 * Римские цифры: 1 = I, 4 = IV, 5 = V, 9 = IX, 10 = X, 40 = XL, 50 = L,
 * 90 = XC, 100 = C, 400 = CD, 500 = D, 900 = CM, 1000 = M.
 * Например: XXIII = 23, XLIV = 44, C = 100
 *
 * Вернуть -1, если roman не является корректным римским числом
 */
fun fromRoman(roman: String): Int = TODO()

/**
 * Очень сложная
 *
 * Имеется специальное устройство, представляющее собой
 * конвейер из cells ячеек (нумеруются от 0 до cells - 1 слева направо) и датчик, двигающийся над этим конвейером.
 * Строка commands содержит последовательность команд, выполняемых данным устройством, например +>+>+>+>+
 * Каждая команда кодируется одним специальным символом:
 *	> - сдвиг датчика вправо на 1 ячейку;
 *  < - сдвиг датчика влево на 1 ячейку;
 *	+ - увеличение значения в ячейке под датчиком на 1 ед.;
 *	- - уменьшение значения в ячейке под датчиком на 1 ед.;
 *	[ - если значение под датчиком равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей следующей командой ']' (с учётом вложенности);
 *	] - если значение под датчиком не равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей предыдущей командой '[' (с учётом вложенности);
 *      (комбинация [] имитирует цикл)+
 *  пробел - пустая команда
 *
 * Изначально все ячейки заполнены значением 0 и датчик стоит на ячейке с номером N/2 (округлять вниз)
 *
 * После выполнения limit команд или всех команд из commands следует прекратить выполнение последовательности команд.
 * Учитываются все команды, в том числе несостоявшиеся переходы ("[" при значении под датчиком не равном 0 и "]" при
 * значении под датчиком равном 0) и пробелы.
 *
 * Вернуть список размера cells, содержащий элементы ячеек устройства после завершения выполнения последовательности.
 * Например, для 10 ячеек и командной строки +>+>+>+>+ результат должен быть 0,0,0,0,0,1,1,1,1,1
 *
 * Все прочие символы следует считать ошибочными и формировать исключение IllegalArgumentException.
 * То же исключение формируется, если у символов [ ] не оказывается пары.
 * Выход за границу конвейера также следует считать ошибкой и формировать исключение IllegalStateException.
 * Считать, что ошибочные символы и непарные скобки являются более приоритетной ошибкой чем выход за границу ленты,
 * то есть если в программе присутствует некорректный символ или непарная скобка, то должно быть выброшено
 * IllegalArgumentException.
 * IllegalArgumentException должен бросаться даже если ошибочная команда не была достигнута в ходе выполнения.
 *
 */
/**
 * Алгоритм
 * необходимо перебрать ячейки
 * сells - размер листа
 * commands - строка, в которой располагаются комнады
 * limit - максмальное количество команд
 * создадим мутирующий список размера cellsЮ добавим 0
 * сделаем перебор в цикле For от строки
 *    i - индекс для команд
 *    k - индекс для листа с числами
 *   list[i] - узнаем символ через when
 *   1) сдвиг на 1 ячейку вправо
 *     увеличить индекс k на единицу
 *   2) cдвиг на 1 ячейку влево
 *     уменьшить индекс k на единицу
 *   3) увеличение значения в ячейке под датчиком на 1 ед.
 *     увеличить значение list[i]++
 *   4) уменьшение значения в ячейке под датчиком на 1 ед.
 *     уменьшить значение list[i]--
 *   5) [
 *
 *   6) ]
 *
 *   Обработка исключений
 *   1) парные скобки
 *   через цикл for перебрать всю строку с командами
 *   2)прочие символы
 *
 */
fun computeDeviceCells(cells: Int, commands: String, limit: Int): List<Int> {
    var numberTeam = 0
    var count = 0
    val symbols = listOf('<', '>', '+', '-', '[', ']', ' ')
    val list = commands.split("")
    var cell = mutableListOf<Int>() // клетка
    var k = cells / 2 // индекс текущей клетки
    var i = 0 // индекс для комнады
    //анализ строки
    for (element in commands) {
        if (element in symbols) {
            //проверка на парность скобок
            when (element) {
                '[' -> count++
                ']' -> count--
            }
        }
        //бросаем исключение, если символ ошибочный
        else {
            throw IllegalArgumentException()
        }
    }
    // бросаем исключение, если скобки не парные
    if (count != 0) {
        throw IllegalArgumentException()
    }
    //добавим нули
    for (index in 0 until cells) {
        cell.add(0, 0)
    }
    while (i != list.size) {
        if (numberTeam <= limit) {
            when (list[i]) {
                ">" -> {
                    if (i >= cells)
                        k++
                    else throw IllegalArgumentException()
                }
                "<" -> {
                    if (i >= cells)
                        k--
                    else throw IllegalArgumentException()
                }
                "+" -> {
                    cell[k]++
                }
                "-" -> {
                    cell[k]--
                }
                "[" -> {
                    //перебираем все скобки.Данное условие необходимо, когда в строке встречается больше одной пары скобок
                    //для первой открывающейся скобки парой служит последняя открывающая и т. д.
                    var test = 0
                    if (cell[k] == 0) {
                        for (index in i until list.size) {
                            when (list[index]) {
                                "]" -> test++
                                "[" -> test--
                            }
                            if (test == 0) {
                                i = index
                                break
                            }
                        }
                    }
                }
                "]" -> {
                    if (cell[k] != 0) {
                        var test = 0
                        for (index in i downTo 0) {
                            when (list[index]) {
                                "]" -> test++
                                "[" -> test--
                            }
                            if (test == 0) {
                                i = index
                                break
                            }
                        }
                    }
                }
            }
            i++
            numberTeam++
        } else {
            break
        }
    }
    return cell
}


